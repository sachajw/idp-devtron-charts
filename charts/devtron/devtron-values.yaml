COMPUTED VALUES:
argo-cd:
  apiVersionOverrides:
    autoscaling: ""
    certmanager: ""
    cloudgoogle: ""
    ingress: ""
    pdb: ""
  applicationSet:
    affinity: {}
    args:
      debug: false
      dryRun: false
      enableLeaderElection: false
      metricsAddr: :8080
      policy: sync
      probeBindAddr: :8081
    enabled: false
    extraArgs: []
    extraContainers: []
    extraEnv: []
    extraEnvFrom: []
    extraVolumeMounts: []
    extraVolumes: []
    image:
      imagePullPolicy: ""
      repository: ""
      tag: ""
    imagePullSecrets: []
    livenessProbe:
      enabled: false
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    logFormat: ""
    logLevel: ""
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        portName: http-metrics
        servicePort: 8085
      serviceMonitor:
        additionalLabels: {}
        annotations: {}
        enabled: false
        interval: 30s
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scheme: ""
        selector: {}
        tlsConfig: {}
    name: applicationset-controller
    nodeSelector: {}
    pdb:
      annotations: {}
      enabled: false
      labels: {}
      maxUnavailable: ""
      minAvailable: ""
    podAnnotations: {}
    podLabels: {}
    podSecurityContext: {}
    priorityClassName: ""
    readinessProbe:
      enabled: false
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicaCount: 1
    resources: {}
    securityContext: {}
    service:
      annotations: {}
      labels: {}
      port: 7000
      portName: webhook
    serviceAccount:
      annotations: {}
      create: true
      labels: {}
      name: ""
    tolerations: []
    webhook:
      ingress:
        annotations: {}
        enabled: false
        extraPaths: []
        hosts: []
        ingressClassName: ""
        labels: {}
        pathType: Prefix
        paths:
        - /api/webhook
        tls: []
  configs:
    clusterCredentials: []
    cm:
      admin.enabled: true
      annotations: {}
      application.instanceLabelKey: argocd.argoproj.io/instance
      create: true
      exec.enabled: false
      server.rbac.log.enforce.enable: false
      timeout.hard.reconciliation: 0
      timeout.reconciliation: 180s
      url: ""
    credentialTemplates: {}
    credentialTemplatesAnnotations: {}
    gpgKeys: {}
    gpgKeysAnnotations: {}
    knownHosts:
      data:
        ssh_known_hosts: |
          bitbucket.org ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
          github.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkt5YRrYMjNuG5N87uRgg6CLrbo5wAdT/y6v0mKV0U2w0WZ2YB/++Tpockg=
          github.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIOMqqnkVzrm0SdG6UOoqKLsabgH5C9okWi0dh2l9GKJl
          github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
          gitlab.com ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBFSMqzJeV9rUzU4kWitGjeR4PWSa29SPqJ1fVkhtj3Hw9xjLVXVYrU9QlYWrOLXBpQ6KWjbjTDTdDkoohFzgbEY=
          gitlab.com ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIAfuCHKVTjquxvt6CM6tdG4SLp1Btn/nOeHHE5UOzRdf
          gitlab.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCsj2bNKTBSpIYDEGk9KxsGh3mySTRgMtXL583qmBpzeQ+jqCMRgBqB98u3z++J1sKlXHWfM9dyhSevkMwSbhoR8XIq/U0tCNyokEi/ueaBMCvbcTHhO7FcwzY92WK4Yt0aGROY5qX2UKSeOvuP4D6TPqKF1onrSzH9bx9XUf2lEdWT/ia1NEKjunUqu1xOB/StKDHMoX4/OKyIzuS0q/T1zOATthvasJFoPrAjkohTyaDUz2LN5JoH839hViyEG82yB+MjcFV5MU3N1l1QL3cVUCh93xSaua1N85qivl+siMkPGbO5xR/En4iEY6K2XPASUEMaieWVNTRCtJ4S8H+9
          ssh.dev.azure.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
          vs-ssh.visualstudio.com ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC7Hr1oTWqNqOlzGJOfGJ4NakVyIzf1rXYd4d7wo6jBlkLvCA4odBlL0mDUyZ0/QUfTTqeu+tm22gOsv+VrVTMk6vwRU75gY/y9ut5Mb3bR5BV58dKXyq9A9UeB5Cakehn5Zgm6x1mKoVyf+FFn26iYqXJRgzIZZcZ5V6hrE0Qg39kZm4az48o0AUbf6Sp4SLdvnuMa2sVNwHBboS7EJkm57XQPVU3/QpyNLHbWDdzwtrlS+ez30S3AdYhLKEOxAG8weOnyrtLJAUen9mTkol8oII1edf7mWWbWVf0nBmly21+nZcmCTISQBtdcyPaEno7fFQMDD26/s0lfKob4Kw8H
    knownHostsAnnotations: {}
    params:
      annotations: {}
      controller.operation.processors: 10
      controller.repo.server.timeout.seconds: 60
      controller.self.heal.timeout.seconds: 5
      controller.status.processors: 20
      otlp.address: ""
      reposerver.parallelism.limit: 0
      server.basehref: /
      server.disable.auth: false
      server.enable.gzip: false
      server.insecure: false
      server.rootpath: ""
      server.staticassets: /shared/app
      server.x.frame.options: sameorigin
    rbac:
      annotations: {}
      create: true
      policy.csv: ""
      policy.default: ""
      scopes: '[groups]'
    repositories: {}
    repositoriesAnnotations: {}
    secret:
      annotations: {}
      argocdServerAdminPassword: ""
      argocdServerAdminPasswordMtime: ""
      argocdServerTlsConfig: {}
      bitbucketServerSecret: ""
      bitbucketUUID: ""
      createSecret: false
      extra: {}
      githubSecret: ""
      gitlabSecret: ""
      gogsSecret: ""
    styles: ""
    tlsCerts: {}
    tlsCertsAnnotations: {}
  controller:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-application-controller
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    args:
      operationProcessors: "25"
      repoServerTimeoutSeconds: "200"
      selfHealTimeout: "5"
      statusProcessors: "50"
    clusterAdminAccess:
      enabled: true
    clusterRoleRules:
      enabled: false
      rules: []
    containerPort: 8082
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    env: []
    envFrom: []
    extraArgs:
    - --kubectl-parallelism-limit
    - "35"
    extraContainers: []
    image:
      imagePullPolicy: ""
      repository: ""
      tag: ""
    imagePullSecrets: []
    initContainers: []
    metrics:
      applicationLabels:
        enabled: false
        labels: []
      enabled: false
      rules:
        enabled: false
        spec: []
      service:
        annotations: {}
        labels: {}
        portName: http-metrics
        servicePort: 8082
      serviceMonitor:
        additionalLabels: {}
        annotations: {}
        enabled: false
        interval: 30s
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scheme: ""
        selector: {}
        tlsConfig: {}
    name: application-controller
    nodeSelector: {}
    pdb:
      annotations: {}
      enabled: false
      labels: {}
      maxUnavailable: ""
      minAvailable: ""
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicas: 1
    resources: {}
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      labels: {}
      name: argocd-application-controller
    tolerations: []
    topologySpreadConstraints: []
    volumeMounts: []
    volumes: []
  crds:
    annotations: {}
    install: true
    keep: true
  createAggregateRoles: false
  dex:
    affinity: {}
    containerPortGrpc: 5557
    containerPortHttp: 5556
    containerPortMetrics: 5558
    containerSecurityContext: {}
    enabled: false
    env: []
    envFrom: []
    extraArgs: []
    extraContainers: []
    image:
      imagePullPolicy: ""
      repository: ghcr.io/dexidp/dex
      tag: v2.35.3-distroless
    imagePullSecrets: []
    initContainers: []
    initImage:
      imagePullPolicy: ""
      repository: ""
      tag: ""
    livenessProbe:
      enabled: false
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        portName: http-metrics
      serviceMonitor:
        additionalLabels: {}
        annotations: {}
        enabled: false
        interval: 30s
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scheme: ""
        selector: {}
        tlsConfig: {}
    name: dex-server
    nodeSelector: {}
    pdb:
      annotations: {}
      enabled: false
      labels: {}
      maxUnavailable: ""
      minAvailable: ""
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    readinessProbe:
      enabled: false
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    resources: {}
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      name: argocd-dex-server
    servicePortGrpc: 5557
    servicePortGrpcName: grpc
    servicePortHttp: 5556
    servicePortHttpName: http
    servicePortMetrics: 5558
    tolerations: []
    topologySpreadConstraints: []
    volumeMounts: []
    volumes: []
  enabled: true
  externalRedis:
    existingSecret: ""
    host: ""
    password: ""
    port: 6379
    secretAnnotations: {}
    username: ""
  extraObjects: []
  fullnameOverride: argocd
  global:
    additionalLabels: {}
    configs: {}
    containerRegistry: quay.io/devtron
    containerSecurityContext:
      allowPrivilegeEscalation: false
      runAsNonRoot: true
      runAsUser: 1000
    hostAliases: []
    image:
      imagePullPolicy: IfNotPresent
      repository: quay.io/argoproj/argocd
      tag: v2.5.2
    imagePullSecrets: []
    logging:
      format: text
      level: info
    networkPolicy:
      create: false
      defaultDenyIngress: false
    nodeSelector: {}
    podAnnotations: {}
    podLabels: {}
    podSecurityContext:
      fsGroup: 1000
      runAsGroup: 1000
      runAsUser: 1000
    securityContext: {}
    storageClass: ""
    tolerations: []
  kubeVersionOverride: ""
  nameOverride: argocd
  notifications:
    affinity: {}
    argocdUrl: null
    bots:
      slack:
        affinity: {}
        containerSecurityContext: {}
        enabled: false
        image:
          imagePullPolicy: ""
          repository: ""
          tag: ""
        imagePullSecrets: []
        nodeSelector: {}
        pdb:
          annotations: {}
          enabled: false
          labels: {}
          maxUnavailable: ""
          minAvailable: ""
        resources: {}
        securityContext:
          runAsNonRoot: true
        service:
          annotations: {}
          port: 80
          type: LoadBalancer
        serviceAccount:
          annotations: {}
          create: true
          name: argocd-notifications-bot
        tolerations: []
        updateStrategy:
          type: Recreate
    cm:
      create: true
    containerSecurityContext: {}
    context: {}
    enabled: false
    extraArgs: []
    extraEnv: []
    extraEnvFrom: []
    extraVolumeMounts: []
    extraVolumes: []
    image:
      imagePullPolicy: ""
      repository: ""
      tag: ""
    imagePullSecrets: []
    logFormat: ""
    logLevel: ""
    metrics:
      enabled: false
      port: 9001
      service:
        annotations: {}
        labels: {}
        portName: http-metrics
      serviceMonitor:
        additionalLabels: {}
        annotations: {}
        enabled: false
        scheme: ""
        selector: {}
        tlsConfig: {}
    name: notifications-controller
    nodeSelector: {}
    notifiers: {}
    pdb:
      annotations: {}
      enabled: false
      labels: {}
      maxUnavailable: ""
      minAvailable: ""
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    resources: {}
    secret:
      annotations: {}
      create: true
      items: {}
    serviceAccount:
      annotations: {}
      create: true
      labels: {}
      name: argocd-notifications-controller
    subscriptions: []
    templates: {}
    tolerations: []
    triggers: {}
  openshift:
    enabled: false
  redis:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-redis
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    containerPort: 6379
    containerSecurityContext: {}
    enabled: true
    env: []
    envFrom: []
    extraArgs: []
    extraContainers: []
    image:
      imagePullPolicy: IfNotPresent
      repository: public.ecr.aws/docker/library/redis
      tag: 7.0.5-alpine
    imagePullSecrets: []
    initContainers: []
    metrics:
      containerPort: 9121
      enabled: false
      image:
        imagePullPolicy: IfNotPresent
        repository: public.ecr.aws/bitnami/redis-exporter
        tag: 1.26.0-debian-10-r2
      resources: {}
      service:
        annotations: {}
        clusterIP: None
        labels: {}
        portName: http-metrics
        servicePort: 9121
        type: ClusterIP
      serviceMonitor:
        additionalLabels: {}
        annotations: {}
        enabled: false
        interval: 30s
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scheme: ""
        selector: {}
        tlsConfig: {}
    name: redis
    nodeSelector: {}
    pdb:
      annotations: {}
      enabled: false
      labels: {}
      maxUnavailable: ""
      minAvailable: ""
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    resources: {}
    securityContext:
      runAsNonRoot: true
      runAsUser: 999
    service:
      annotations: {}
      labels: {}
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: false
      create: false
      name: ""
    servicePort: 6379
    tolerations: []
    topologySpreadConstraints: []
    volumeMounts: []
    volumes: []
  redis-ha:
    enabled: false
    exporter:
      enabled: true
    haproxy:
      enabled: true
      metrics:
        enabled: true
    image:
      tag: 7.0.5-alpine
    persistentVolume:
      enabled: false
    redis:
      config:
        save: '""'
      masterGroupName: argocd
    topologySpreadConstraints:
      enabled: false
      maxSkew: ""
      topologyKey: ""
      whenUnsatisfiable: ""
  repoServer:
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-repo-server
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    autoscaling:
      behavior: {}
      enabled: false
      maxReplicas: 5
      minReplicas: 1
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    clusterAdminAccess:
      enabled: false
    clusterRoleRules:
      enabled: false
      rules: []
    containerPort: 8081
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    env:
    - name: ARGOCD_EXEC_TIMEOUT
      value: 180s
    envFrom: []
    extraArgs:
    - --repo-cache-expiration
    - 24h
    - --parallelismlimit
    - "50"
    extraContainers: []
    image:
      imagePullPolicy: ""
      repository: ""
      tag: ""
    imagePullSecrets: []
    initContainers: []
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        portName: http-metrics
        servicePort: 8084
      serviceMonitor:
        additionalLabels: {}
        annotations: {}
        enabled: false
        interval: 30s
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scheme: ""
        selector: {}
        tlsConfig: {}
    name: repo-server
    nodeSelector: {}
    pdb:
      annotations: {}
      enabled: false
      labels: {}
      maxUnavailable: ""
      minAvailable: ""
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    rbac: []
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicas: 1
    resources: {}
    service:
      annotations: {}
      labels: {}
      port: 8081
      portName: https-repo-server
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      labels: {}
      name: ""
    tolerations: []
    topologySpreadConstraints: []
    volumeMounts: []
    volumes: []
  server:
    GKEbackendConfig:
      enabled: false
      spec: {}
    GKEfrontendConfig:
      enabled: false
      spec: {}
    GKEmanagedCertificate:
      domains:
      - argocd.example.com
      enabled: false
    affinity:
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/name: argocd-server
            topologyKey: kubernetes.io/hostname
          weight: 100
        - podAffinityTerm:
            labelSelector:
              matchLabels:
                app.kubernetes.io/part-of: argocd
            topologyKey: kubernetes.io/hostname
          weight: 5
    autoscaling:
      behavior: {}
      enabled: false
      maxReplicas: 5
      minReplicas: 1
      targetCPUUtilizationPercentage: 50
      targetMemoryUtilizationPercentage: 50
    certificate:
      additionalHosts: []
      domain: argocd.example.com
      duration: ""
      enabled: false
      issuer:
        group: ""
        kind: ""
        name: ""
      privateKey:
        algorithm: RSA
        encoding: PKCS1
        rotationPolicy: Never
        size: 2048
      renewBefore: ""
      secretName: argocd-server-tls
    clusterAdminAccess:
      enabled: true
    configEnabled: false
    containerPort: 8080
    containerSecurityContext:
      allowPrivilegeEscalation: false
      capabilities:
        drop:
        - all
      readOnlyRootFilesystem: true
      runAsNonRoot: true
    env: []
    envFrom: []
    extensions:
      enabled: false
      image:
        imagePullPolicy: IfNotPresent
        repository: ghcr.io/argoproj-labs/argocd-extensions
        tag: v0.1.0
      resources: {}
    extraArgs: []
    extraContainers: []
    image:
      imagePullPolicy: ""
      repository: ""
      tag: ""
    imagePullSecrets: []
    ingress:
      annotations: {}
      enabled: false
      extraPaths: []
      hosts: []
      https: false
      ingressClassName: ""
      labels: {}
      pathType: Prefix
      paths:
      - /
      tls: []
    ingressGrpc:
      annotations: {}
      awsALB:
        backendProtocolVersion: HTTP2
        serviceType: NodePort
      enabled: false
      extraPaths: []
      hosts: []
      https: false
      ingressClassName: ""
      isAWSALB: false
      labels: {}
      pathType: Prefix
      paths:
      - /
      tls: []
    initContainers: []
    lifecycle: {}
    livenessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    metrics:
      enabled: false
      service:
        annotations: {}
        labels: {}
        portName: http-metrics
        servicePort: 8083
      serviceMonitor:
        additionalLabels: {}
        annotations: {}
        enabled: false
        interval: 30s
        metricRelabelings: []
        namespace: ""
        relabelings: []
        scheme: ""
        selector: {}
        tlsConfig: {}
    name: server
    nodeSelector: {}
    pdb:
      annotations: {}
      enabled: false
      labels: {}
      maxUnavailable: ""
      minAvailable: ""
    podAnnotations: {}
    podLabels: {}
    priorityClassName: ""
    rbacConfig:
      policy.default: role:admin
    readinessProbe:
      failureThreshold: 3
      initialDelaySeconds: 10
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 1
    replicas: 1
    resources: {}
    route:
      annotations: {}
      enabled: false
      hostname: ""
      termination_policy: None
      termination_type: passthrough
    service:
      annotations: {}
      externalIPs: []
      externalTrafficPolicy: ""
      labels: {}
      loadBalancerIP: ""
      loadBalancerSourceRanges: []
      namedTargetPort: true
      nodePortHttp: 30080
      nodePortHttps: 30443
      servicePortHttp: 80
      servicePortHttpName: http
      servicePortHttps: 443
      servicePortHttpsName: https
      sessionAffinity: ""
      type: ClusterIP
    serviceAccount:
      annotations: {}
      automountServiceAccountToken: true
      create: true
      labels: {}
      name: argocd-server
    tolerations: []
    topologySpreadConstraints: []
    volumeMounts: []
    volumes: []
components:
  argocdDexServer:
    image: dex:v2.30.2
    imagePullPolicy: IfNotPresent
    initContainer:
      authenticator: authenticator:e414faff-393-13273
    registry: ""
  chartSync:
    extraConfigs: {}
    image: chart-sync:0dde3b1a-836-30095
    registry: ""
    schedule: 0 19 * * *
  ciRunner:
    image: ci-runner:0dde3b1a-138-30091
    registry: ""
  dashboard:
    config:
      analytics: "false"
      applicationMetrics: "true"
      extraConfigs:
        API_BATCH_SIZE: "30"
        ENABLE_BUILD_CONTEXT: "true"
        ENABLE_CI_JOB: "true"
        ENABLE_EXTERNAL_ARGO_CD: "true"
        ENABLE_RESOURCE_SCAN: "true"
        ENABLE_RESTART_WORKLOAD: "true"
        ENABLE_SCOPED_VARIABLES: "true"
        FEATURE_EXTERNAL_FLUX_CD_ENABLE: "true"
        FEATURE_STEP_WISE_LOGS_ENABLE: "true"
        FEATURE_USER_DEFINED_GITOPS_REPO_ENABLE: "true"
        GLOBAL_API_TIMEOUT: "60000"
        HIDE_EXCLUDE_INCLUDE_GIT_COMMITS: "false"
        SERVICE_WORKER_TIMEOUT: "1"
        TRIGGER_API_TIMEOUT: "60000"
        USE_V2: "true"
      hotjar: "false"
      sentry: "false"
      sentryEnv: PRODUCTION
    image: dashboard:1c40d516-690-30089
    imagePullPolicy: IfNotPresent
    registry: ""
  devtron:
    cicdImage: devtron:e67c3b76-434-30101
    customOverrides: {}
    image: hyperion:e67c3b76-280-30100
    imagePullPolicy: IfNotPresent
    ingress:
      annotations: {}
      className: nginx
      enabled: false
      host: devtron.example.com
      labels: {}
      pathType: ImplementationSpecific
      tls: []
    registry: ""
    service:
      annotations: {}
      labels: {}
      loadBalancerSourceRanges: []
      port: 80
      type: LoadBalancer
    serviceMonitor:
      enabled: false
  gitsensor:
    configs:
      COMMIT_STATS_TIMEOUT_IN_SEC: "2"
      ENABLE_FILE_STATS: "true"
      PG_ADDR: postgresql-postgresql.devtroncd
      PG_USER: postgres
      USE_GIT_CLI: "true"
    dbconfig:
      keyName: postgresql-password
      secretName: postgresql-postgresql
    image: git-sensor:0dde3b1a-200-30085
    imagePullPolicy: IfNotPresent
    persistence:
      volumeSize: 2Gi
    registry: ""
    serviceMonitor:
      enabled: false
  kubelink:
    configs:
      ENABLE_HELM_RELEASE_CACHE: "true"
      MANIFEST_FETCH_BATCH_SIZE: "2"
      NATS_MSG_PROCESSING_BATCH_SIZE: "1"
      NATS_SERVER_HOST: nats://devtron-nats.devtroncd:4222
      PG_ADDR: postgresql-postgresql.devtroncd
      PG_DATABASE: orchestrator
      PG_LOG_QUERY: "true"
      PG_PORT: "5432"
      PG_USER: postgres
      USE_CUSTOM_HTTP_TRANSPORT: "true"
    dbconfig:
      keyName: postgresql-password
      secretName: postgresql-postgresql
    image: kubelink:0dde3b1a-564-30082
    imagePullPolicy: IfNotPresent
    registry: ""
  kubewatch:
    configs:
      ACD_INFORMER: "true"
      ACD_NAMESPACE: devtroncd
      CI_INFORMER: "true"
      NATS_STREAM_MAX_AGE: "10800"
      PG_ADDR: postgresql-postgresql.devtroncd
      PG_DATABASE: orchestrator
      PG_LOG_QUERY: "true"
      PG_PORT: "5432"
      PG_USER: postgres
      USE_CUSTOM_HTTP_TRANSPORT: "true"
      devtroncd_NAMESPACE: devtron-ci
    dbconfig:
      keyName: postgresql-password
      secretName: postgresql-postgresql
    image: kubewatch:0dde3b1a-419-30285
    imagePullPolicy: IfNotPresent
    registry: ""
  lens:
    configs:
      GIT_SENSOR_PROTOCOL: GRPC
      GIT_SENSOR_URL: git-sensor-service.devtroncd:90
      NATS_SERVER_HOST: nats://devtron-nats.devtroncd:4222
      PG_ADDR: postgresql-postgresql.devtroncd
      PG_DATABASE: lens
      PG_PORT: "5432"
      PG_USER: postgres
    dbconfig:
      keyName: postgresql-password
      secretName: postgresql-postgresql
    image: lens:0dde3b1a-333-30090
    imagePullPolicy: IfNotPresent
    registry: ""
    resources: {}
    secrets: {}
  migrator:
    duplicateChartImage: devtron-utils:dup-chart-repo-v1.1.0
    envVars:
      casbin:
        DB_NAME: casbin
      devtron:
        DB_NAME: orchestrator
      gitsensor:
        DB_NAME: git_sensor
      lens:
        DB_NAME: lens
    image: migrator:v4.16.2
    kubectlImage: kubectl:latest
    registry: ""
  nats:
    image: nats:2.9.3-alpine
    metrics:
      image: prometheus-nats-exporter:0.9.0
      imagePullPolicy: IfNotPresent
    natsBox:
      image: nats-box
    persistence:
      storage: 5Gi
    registry: ""
    reloader:
      image: nats-server-config-reloader:0.6.2
      imagePullPolicy: IfNotPresent
    serviceMonitor:
      enabled: false
  postgres:
    armImage: postgres:11.9
    image: postgres:11.9.0-debian-10-r26
    imagePullPolicy: IfNotPresent
    initImage: minideb:latest
    metrics:
      armImage: postgres_exporter:v0.10.1
      image: postgres_exporter:v0.4.7
    persistence:
      volumeSize: 20Gi
    registry: ""
configs:
  BLOB_STORAGE_PROVIDER: ""
devtronEnterprise:
  casbin:
    configs:
      PG_ADDR: postgresql-postgresql.devtroncd
      PG_DATABASE: casbin
      PG_PORT: "5432"
      PG_USER: postgres
    dbconfig:
      keyName: postgresql-password
      secretName: postgresql-postgresql
    image: casbin:efc28fb2-6de0e914-462-25420
    imagePullPolicy: IfNotPresent
    registry: ""
    resources: {}
  enabled: false
  scoop:
    configs:
      CLUSTER_ID: "1"
      ORCHESTRATOR_URL: http://devtron-service.devtroncd.svc.cluster.local/orchestrator
    enabled: false
    image: scoop:296d351d-629-24001
    imagePullPolicy: IfNotPresent
    registry: ""
    resources: {}
extraManifests: []
global:
  configs: {}
  containerRegistry: quay.io/devtron
  containerSecurityContext:
    allowPrivilegeEscalation: false
    runAsNonRoot: true
    runAsUser: 1000
  imagePullSecrets: []
  nodeSelector: {}
  podSecurityContext:
    fsGroup: 1000
    runAsGroup: 1000
    runAsUser: 1000
  storageClass: ""
  tolerations: []
installer:
  arch: multi-arch
  image: inception
  modules:
  - cicd
  openshift: false
  production_overrides: ""
  registry: ""
  release: v1.3.1
  repo: devtron-labs/devtron
  source: github
  tag: 473deaa4-185-21582
minio:
  enabled: false
  gatewayImage: minio:RELEASE.2020-12-03T05-49-24Z
  image: minio:RELEASE.2021-02-14T04-01-33Z
  imagePullPolicy: IfNotPresent
  mbImage: minio-mc:RELEASE.2021-02-14T04-28-06Z
  mbImagePullPolicy: IfNotPresent
  persistence:
    storage: 50Gi
  replicaCount: 1
monitoring:
  grafana:
    batsImage: bats:v1.4.1
    busyboxImage: busybox:1.31.1
    enabled: false
    grafanaDashboards:
      curlImage: curl:7.73.0
      image: k8s-sidecar:1.1.0
      imagePullPolicy: IfNotPresent
      resources: {}
    grafanaOrgJob:
      curlImage: k8s-utils:tutum-curl
    image: grafana:7.3.1
    imagePullPolicy: IfNotPresent
    persistence:
      storage: 2Gi
    registry: ""
    resources: {}
notifier:
  configs:
    CD_ENVIRONMENT: PROD
    DB: orchestrator
    DB_HOST: postgresql-postgresql.devtroncd
    DB_PORT: "5432"
    DB_USER: postgres
  dbconfig:
    keyName: postgresql-password
    secretName: postgresql-postgresql
  enabled: false
  image: notifier:5e9c010b-372-30094
  imagePullPolicy: IfNotPresent
  resources: {}
  secrets: {}
secrets: {}
security:
  clair:
    enabled: false
    fullnameOverride: clair
    image:
      repository: clair
      tag: 4.3.6
  enabled: false
  imageScanner:
    configs:
      TRIVY_DB_REPOSITORY: mirror.gcr.io/aquasec/trivy-db
      TRIVY_JAVA_DB_REPOSITORY: mirror.gcr.io/aquasec/trivy-java-db
    image: image-scanner:0dde3b1a-141-30093
  trivy:
    enabled: false
workflowController:
  IMDSv1ExecutorImage: argoexec:v3.0.7
  IMDSv1Image: workflow-controller:v3.0.7
  IMDSv2Enforced: true
  executorImage: argoexec:v3.4.3
  image: workflow-controller:v3.4.3
  registry: quay.io/argoproj
